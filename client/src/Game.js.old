import React, {Component} from 'react';
import Panel from './Panel.js';
import Cell from './Cell.js'
import axios from 'axios';

class Game extends Component{
  constructor(props){
    super(props);
    this.state = {start: null, width: window.innerWidth, board: null, game: null};

    // bindings
    this.move = this.move.bind(this);
    // board is horizontal row by col
    this.loadBoard = this.loadBoard.bind(this);
  }

  componentWillReceiveProps(props) {
    // Assumes props.game.gameId is set.
    this.setState({game: props.game});
    this.loadBoard(props.game);
  }

  loadBoard(game) {
    if (game == null) {
      return;
    }
    axios.post(this.props.server + '/query', {
      type: "board",
      gameId: game.gameId,
    }).then(function(response) {
      let board = response.data.boards[0];
      this.setState({board: board.cells});
    }.bind(this)).catch(this.props.error);
  }

  updateDimensions() {
    this.setState({ width: window.innerWidth });
  }

  componentDidMount() {
    this.updateDimensions();
    window.addEventListener("resize", this.updateDimensions.bind(this));
  }

  componentWillUnmount() {
    window.removeEventListener("resize", this.updateDimensions.bind(this));
  }

  move(id) {
    if (this.state.start != null) {
      //TODO: Replace this with an API call.
      console.log("Moving "+this.state.start+" to "+id);
      this.setState({start: null})
    } else {
      this.setState({start: id})
    }
  }

  getBoardHoriz(board){
    return (
      <div>
      {this.getRows(board, "col-2", "col-1")}
      </div>
    );
  }

  getBoardVert(board) {
    console.log('rendering verticle');
    //board = JSON.parse(JSON.stringify(board));
    let rows = [1, 2, 3, 4, 5, 6, 7, 8].map(() => [{}, {}, {}, {}]);
    for (let row = 0; row < 4; row++)  {
      for (let col = 0; col < 8; col++) {
        let newRow = col;
        let newCol = 3 - row;
        rows[newRow][newCol] = board[row][col]; // Transpose flip about x-axis
      }
    }

    return (
      <div>
        {this.getRows(rows, "d-none d-md-block col-md-2", "col-3 col-md-2")}
      </div>
    );
  }

  getRows(rows, divClass, cellDivClass) {
    return (
      rows.map((row) => (
        <div className="row">
          {this.getRow(row, divClass, cellDivClass)}
        </div>
      ))
    );
  }

  getRow(row, divClass, cellDivClass) {
    return (
      <div className="row">
        <div className={divClass}/>
        {row.map((piece) => this.buildCell(piece, cellDivClass))}
        <div className={divClass}/>
      </div>
    );
  }

  buildCell(piece, divClass) {
    return (
      <div className={divClass}>
        <Cell piece={piece} id={piece.id} move={this.move}/>
      </div>
    );
  }

  renderBoard(){
    if(this.state.width > 1000) {
      return (<div>{this.getBoardHoriz(this.state.board)}</div>);
    } else {
      return (<div>{this.getBoardVert(this.state.board)}</div>);
    }
  }

  render() {
    let board = null;
    if (this.state.board != null) {
      board = this.renderBoard();
    } else {
      board = (<div>Accept invite or select game.</div>);
    }
    return (
      <Panel name="Game" startCollapsed={true}>
        {board}
      </Panel>
    );
  }
}

export default Game